1) В приложении на MERN в корне должен быть именно back-end, а потом отдельная папка в которой будет уже front-end.
это норм, так и должно быть, в отличии от приложения с php, где открывается файл index.js в первую очередь.

2) Пакет concurrently как раз нужен для того, чтобы запускать front-end и back-ende одновременно.

3) Базовые действия при создании сервера на Node.JS:
    1. import express                           // импортируем express
    2. const app = express()                    // создаём сервер с помощью функции express()
    3. app.listen(5000)                         // вызываем app.listen() с названием порта.

4)  await mongoose.connect;

5) создаётся функция start(), которая сначала коннектится к базе данных через mongoose, а потом уже запускает сервер.
т.е async function, где await mongoose.connect, обработка ошибки и потом уже app.listen.

6) Чтобы использовать import в app.js, надо написать в package.json "type": "module". Иначе будет ошибка "cannot use import outside a module". А так
получается, что файл app тоже модуль, поэтому ошибки нету в этом случае.

7) после этого в приложении регистрируются роуты с помощью app.use('/'), куда вводится ссылка, по которой будет проходить запрос.

8) Валидация данных регистрации/логина должна быть не только на фронте, но главное - она должна быть на сервере.

9) Чтобы валидировать данные на Node.JS нужен пакет express-validator.

10) потом создаётся приложение с помощью npx create-react-app client, таким образом фрон энд на реакте будет находиться в папке
client. Теперь осталось соеденить папку client c бэкэндом.

11) так как и в бэк энде и в папке client теперь есть свой pakage json с командами запуска и в папке client npm run start запускает
клиентское приложение на react, а корне, в основной папке эта же томанда запускает backend, в файл package.json в корне добавляется
новая команда. "npm run start --prefix client" - она позволяет запустить npm run start, который находится на клиенте - из backend.

12) потом создаётся ещё один скрипт, который должен запускать сервер и клиент одновременно, чтобы не вводить обе команды в
разных терминалах: "dev": "concurrently \"npm run server\" \"npm run client\" "
для этого используется пакет concurrently и для этого двойные кавычки в двойных кавычках нужно экранизировать.

13) нужно псмотреть, как работает новая версия concurrently, так как я поставил старую, так как новая говорила что комманды
concurrently в скриптах не должно быть.

14) фронт и бэк запускаются на разных портах даже.

15) клиентские и серверные скрипты запускаются на разных портах, поэтому нужно использовать proxy, чтобы переадрессовать
запрос с клиента на сервер с порта клиента на серверный порт.